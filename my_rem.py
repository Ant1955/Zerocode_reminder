import datetime
import logging
import random
import threading
import time
from datetime import datetime
from io import BytesIO

import pytz
import telebot
from openpyxl import load_workbook
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import CallbackContext
from timezonefinder import TimezoneFinder


def check_time_fmt(shdl_time):
    if len(shdl_time) != 5:
        return False
    shdl_hh = int(shdl_time[0:2])
    shdl_ddot = shdl_time[2]
    shdl_min = int(shdl_time[3:5])
    if 0 <= shdl_hh < 24 and shdl_ddot == ':' and 0 <= shdl_min < 60:
        return True
    else: 
        return False

topic = ["–ü–æ—Ä–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É", "Duolingo –ø–æ–∫–∞ –µ–¥–µ—à—å", "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –ø–æ—á—Ç–µ", "–ú–æ–∂–µ—à—å –ø–æ–ø–∏—Ç—å –∫–æ—Ñ–µ",
           "–°–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á –æ—Å—Ç–∞–ª–∏—Å—å?", "–ò–Ω–æ–≥–¥–∞ –ª—é–¥–∏ –æ–±–µ–¥–∞—é—Ç", "–ù–∞—á–∞–ª—å–Ω–∏–∫ —Ç–µ–±—è –≤–∏–¥–µ–ª?", "–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
           "–º–æ–∂–µ—Ç —É–∂–µ –¥–æ–º–æ–π?", "–ó–µ—Ä–æ–∫–æ—Ç —á—Ç–æ –ø–∏—à–µ—Ç?", "–î–æ–º–∞—à–∫—É —Å–¥–µ–ª–∞–ª?", "–Ω–µ —Å—Ç–æ–∏—Ç –ø–æ–∑–¥–Ω–æ –ª–æ–∂–∏—Ç—å—Å—è —Å–ø–∞—Ç—å"]

shedule = ["8:00", "8:45", "9:30", "11:30", "12:00", "15:00", "17:00", "23:38", "23:26", "22:54", "22:56", "23:36"]

shift = "99:"
for i in range(20):
    shedule.append(shift + str(i + 18))

# bot = telebot.TeleBot('7394207851:AAFzbujyT1ekzK2I2OOOD95XXL7hK0KON9M')
bot = telebot.TeleBot('7415862022:AAEvrljMTbCNODKkMjIPgP-CTnIue9fwahQ')

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä TimezoneFinder
tf = TimezoneFinder()

@bot.message_handler(commands=['start'])
def start_message(message, update: Update, context: CallbackContext) -> None:
    keyboard = [[KeyboardButton("Send location", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    update.message.reply_text('Please share your location to find out your local time.', reply_markup=reply_markup)
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —á–∞—Ç –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —É—á–∏—Ç—å —É—Ä–æ–∫–∏ –∏ –¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É!\n"
                          "/shedule - –∑–∞–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —á–∞—Ç–µ\n"
                          "–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª .xlsx –≥–¥–µ –≤ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ –≤—Ä–µ–º—è, –∞ –≤–æ –≤—Ç—Ä–æ–π —Ç–µ–º–∞\n"
                          "–Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –µ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n"
                          "/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
                          "/fact - —É–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –º—ã—Å–ª—å (–∏—Ö –Ω–µ –º–Ω–æ–≥–æ)\n")
    global reminder_thread
    reminder_thread = threading.Thread(target=send_reminders, args=(message.chat.id,))
    reminder_thread.start()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
def location(update: Update, context: CallbackContext) -> None:
    user_location = update.message.location
    if user_location:
        lat = user_location.latitude
        lon = user_location.longitude

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
        timezone_str = tf.timezone_at(lat=lat, lng=lon)
        if timezone_str:
            timezone = pytz.timezone(timezone_str)
            local_time = datetime.now(timezone)
            update.message.reply_text(f'Your local time is: {local_time.strftime("%Y-%m-%d %H:%M:%S")}')
        else:
            update.message.reply_text('Could not determine your timezone.')
    else:
        update.message.reply_text('Location not received.')

@bot.message_handler(commands=['fact'])
def action_request(message):
    list = ["–ò—Å–ø–æ–ª—å–∑—É–π Duolingo - –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –Ω–µ –∑–∞–±—ã—Ç—å —è–∑—ã–∫ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å",
            "–†–µ–∂–µ —Å–º–æ—Ç—Ä–∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä - –ª—É—á—à–µ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –ª–µ–Ω—Ç—É –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Å–≤–æ–µ–º—É –≤—ã–±–æ—Ä—É",
            "–ü–∏—à–∏ –Ω–∞ Python —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—è –∏–¥–µ—é –ø—Ä–æ–≥—Ä–∞–º–º—ã chatGPT - –≤ –º–∏—Ä–µ —É–∂–µ –≤—Å–µ –Ω–∞–ø–∏—Å–∞–Ω–æ",
            "–ù–µ –æ—á–µ–Ω—å –¥–æ–≤–µ—Ä—è–π –õ–∏–Ω—É–∫—Å—É –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –æ—Ç github - –∏—Ö –ø–∏—Å–∞–ª–∏ —Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ —Ç—ã"]
    random_fact = random.choice(list)
    bot.reply_to(message, f"–õ–æ–≤–∏ –º—ã—Å–ª—å: {random_fact}")

@bot.message_handler(commands=['shedule'])
def build_shedule(message):
    bot.reply_to(message, "–ø–æ—Å—Ç—Ä–æ—á–Ω–æ –≤–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ù–ù:MM –∏ —Ç–µ–º—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª,"
                          "–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è —Ç—É—Ç –∂–µ")
    mxtopic = len(topic)
    for i in range(mxtopic):
        dummy = shedule.pop(0)
    topic.clear()

@bot.message_handler(commands=['list'])
def list_shedule(message):
    chat_id = message.chat.id
    for i in range(len(topic)):
        bot.send_message(chat_id, f"{shedule[i]}\t {topic[i]}")

@bot.message_handler(content_types=['document'])
def handle_document(message):
    try:
        chat_id = message.chat.id
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ñ–∞–π–ª Excel
        if message.document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' or message.document.file_name.endswith('.xlsx'):
            mxtopic = len(topic)
            for i in range(mxtopic):
                dummy = shedule.pop(0)
            topic.clear()
            wb = load_workbook(BytesIO(downloaded_file))
            ws = wb.active  # –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç
            for row in ws.iter_rows(values_only=True):
                s_time = str(row[0])[:5]
                if check_time_fmt(s_time):
                    shedule.insert(len(topic), s_time)
                    topic.append(row[1])
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx.")
    except Exception as e:
        bot.reply_to(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text
    line = text.split()
    # –Ω–∞–¥–æ –ø—Ä–≤–µ—Ä—è—Ç—å —Ñ–æ—Ä–º–∞—Ç line[0]
    shdl_time = str(line[0])
    if check_time_fmt(shdl_time):
        shedule.insert(len(topic), shdl_time)
        topic.append(text[len(shdl_time):])
    else:
        bot.send_message(chat_id, "—á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ c —Ñ–æ—Ä–º–∞—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–¥–æ HH:MM\n–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

def send_reminders(chat_id):
    while True:
        now = datetime.datetime.now().strftime('%H:%M')
        for k in range(len(topic)):
            if now == shedule[k]:
                markup = telebot.types.InlineKeyboardMarkup()
                like_button = telebot.types.InlineKeyboardButton("üëç", callback_data=f"like_{k}")
                markup.add(like_button)
                bot.send_message(chat_id, topic[k], reply_markup=markup)
                time.sleep(61)
        time.sleep(3)

@bot.callback_query_handler(func=lambda call: call.data.startswith("like_"))
def callback_like(call):
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞
        bot.answer_callback_query(call.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –ª–∞–π–∫!")
        bot.send_message(call.message.chat.id, f"–õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω {call.id}, —Å–ø–∞—Å–∏–±–æ! {call.data}")
    except Exception as e:
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

bot.polling(non_stop=True)
